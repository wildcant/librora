// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// TODO: Splitting admin and user enums will scale better and improve validations, I'll keep it like this for simplicity.
enum Role {
  LENDER_BORROWER_USER
  SUPER_ADMIN
}

enum Type {
  ADMIN
  USER
}

enum Status {
  PENDING
  ACTIVE
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  emailVerified        DateTime?
  firstName            String
  lastName             String
  password             String?
  type                 Type          @default(USER)
  role                 Role          @default(LENDER_BORROWER_USER)
  status               Status        @default(PENDING)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  Book                 Book[]
  location             Location?     @relation(fields: [locationId], references: [id])
  locationId           String
  lenderReservations   Reservation[] @relation(name: "lender")
  borrowerReservations Reservation[] @relation(name: "borrower")
}

model Book {
  id           String        @id @default(cuid())
  author       String?
  date         DateTime
  description  String
  // editorial Editorial
  // language ELanguage
  numPages     Int
  owner        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug         String
  title        String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  image        Image         @relation(fields: [imageId], references: [id])
  imageId      String
}

// source https://gist.github.com/kyranjamie/646386d5edc174e8b549111572897f81
enum Country {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AN
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KR
  KP
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  SS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  XK
  YE
  ZM
  ZW
}

model Location {
  id        String   @id @default(cuid())
  country   Country
  city      String
  zipcode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

enum ReservationStatus {
  PENDING
  CANCELED
  DECLINED
  EXPIRED
  CONFIRMED
  BORROWED
  LATE
  RETURNED
  REVIEWED
}

model Reservation {
  id         String            @id @default(cuid())
  start      DateTime
  end        DateTime
  book       Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     String
  borrower   User              @relation(name: "borrower", fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId String
  lender     User              @relation(name: "lender", fields: [lenderId], references: [id], onDelete: Cascade)
  lenderId   String
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Image {
  id       String  @id @default(cuid())
  publicId String?
  url      String
  Book     Book[]
}
